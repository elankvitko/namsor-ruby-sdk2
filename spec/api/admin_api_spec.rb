=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

OpenAPI spec version: 2.0.2-beta
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for NamSorClient::AdminApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AdminApi' do
  before do
    # run before each test
    @api_instance = NamSorClient::AdminApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdminApi' do
    it 'should create an instance of AdminApi' do
      expect(@api_instance).to be_instance_of(NamSorClient::AdminApi)
    end
  end

  # unit tests for api_usage
  # Print current API usage.
  # @param [Hash] opts the optional parameters
  # @return [APIPeriodUsageOut]
  describe 'api_usage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_usage_history
  # Print historical API usage.
  # @param [Hash] opts the optional parameters
  # @return [APIPeriodUsageOut]
  describe 'api_usage_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_usage_history_aggregate
  # Print historical API usage (in an aggregated view, by service, by day/hour/min).
  # @param [Hash] opts the optional parameters
  # @return [APIPeriodUsageOut]
  describe 'api_usage_history_aggregate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for available_plans
  # List all available plans in the default currency (usd).
  # @param [Hash] opts the optional parameters
  # @return [APIPlansOut]
  describe 'available_plans test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for available_plans1
  # List all available plans in the user&#39;s preferred currency.
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIPlansOut]
  describe 'available_plans1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for available_services
  # List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
  # @param [Hash] opts the optional parameters
  # @return [APIPlansOut]
  describe 'available_services test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billing_currencies
  # List possible currency options for billing (USD, EUR, GBP, ...)
  # @param [Hash] opts the optional parameters
  # @return [CurrenciesOut]
  describe 'billing_currencies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billing_history
  # Read the history billing information (invoices paid via Stripe or manually).
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [BillingHistoryOut]
  describe 'billing_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billing_info
  # Read the billing information (company name, address, phone, vat ID)
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [BillingInfoInOut]
  describe 'billing_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for charge
  # Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
  # @param [Hash] opts the optional parameters
  # @option opts [InlineObject] :inline_object 
  # @return [APIKeyOut]
  describe 'charge test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for corporate_key
  # Setting an API Key to a corporate status.
  # @param api_key 
  # @param corporate 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'corporate_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for debug_level
  # Update debug level for a classifier
  # @param logger 
  # @param level 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'debug_level test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invalidate_cache
  # Invalidate system caches.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'invalidate_cache test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for namsor_counter
  # Get the overall API counter
  # @param [Hash] opts the optional parameters
  # @return [SoftwareVersionOut]
  describe 'namsor_counter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment_info
  # Get the Stripe payment information associated with the current google auth session token.
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIKeyOut]
  describe 'payment_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for procure_key
  # Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIKeyOut]
  describe 'procure_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for redeploy_ui
  # Redeploy UI from current dev branch.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'redeploy_ui test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for redeploy_ui1
  # Redeploy UI from current dev branch.
  # @param live 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'redeploy_ui1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_user_account
  # Subscribe to a give API plan, using the user&#39;s preferred or default currency.
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIPlanSubscriptionOut]
  describe 'remove_user_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for shutdown
  # Stop learning and shutdown system.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'shutdown test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for software_version
  # Get the current software version
  # @param [Hash] opts the optional parameters
  # @return [SoftwareVersionOut]
  describe 'software_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for source_stats
  # Print basic source statistics.
  # @param source 
  # @param [Hash] opts the optional parameters
  # @return [SystemMetricsOut]
  describe 'source_stats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stats
  # Print basic system statistics.
  # @param [Hash] opts the optional parameters
  # @return [SystemMetricsOut]
  describe 'stats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stripe_connect
  # Connects a Stripe Account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scope 
  # @option opts [String] :code 
  # @option opts [String] :error 
  # @option opts [String] :error_description 
  # @return [nil]
  describe 'stripe_connect test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for subscribe_plan
  # Subscribe to a give API plan, using the user&#39;s preferred or default currency.
  # @param plan_name 
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIPlanSubscriptionOut]
  describe 'subscribe_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_billing_info
  # Sets or update the billing information (company name, address, phone, vat ID)
  # @param token 
  # @param [Hash] opts the optional parameters
  # @option opts [BillingInfoInOut] :billing_info_in_out 
  # @return [BillingInfoInOut]
  describe 'update_billing_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_limit
  # Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
  # @param usage_limit 
  # @param hard_or_soft 
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIPeriodUsageOut]
  describe 'update_limit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_payment_default
  # Update the default Stripe card associated with the current google auth session token.
  # @param defaut_source_id 
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIKeyOut]
  describe 'update_payment_default test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_info
  # Get the user profile associated with the current google auth session token.
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [APIKeyOut]
  describe 'user_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for verify_email
  # Verifies an email, based on token sent to that email
  # @param email_token 
  # @param [Hash] opts the optional parameters
  # @return [APIKeyOut]
  describe 'verify_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for verify_remove_email
  # Verifies an email, based on token sent to that email
  # @param email_token 
  # @param [Hash] opts the optional parameters
  # @return [APIKeyOut]
  describe 'verify_remove_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet
  # Vetting of a source.
  # @param source 
  # @param vetted 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
