=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

OpenAPI spec version: 2.0.2-beta
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for NamSorClient::PersonalApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PersonalApi' do
  before do
    # run before each test
    @api_instance = NamSorClient::PersonalApi.new

    NamSorClient.configure do |config|
      # Configure API key authorization: api_key
      config.api_key['X-API-KEY'] = ENV['API_KEY']
    end
  end

  after do
    # run after each test
  end

  describe 'test an instance of PersonalApi' do
    it 'should create an instance of PersonalApi' do
      expect(@api_instance).to be_instance_of(NamSorClient::PersonalApi)
    end
  end

  # unit tests for country
  # [USES 10 UNITS] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
  # @param personal_name_full 
  # @param [Hash] opts the optional parameters
  # @return [PersonalNameGeoOut]
  describe 'country test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for country_batch
  # [USES 10 UNITS] Infer the likely country of residence of up to 1000 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
  # @return [BatchPersonalNameGeoOut]
  describe 'country_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for diaspora
  # [USES 20 UNITS] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
  # @param country_iso2 
  # @param first_name 
  # @param last_name 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameDiasporaedOut]
  describe 'diaspora test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for diaspora_batch
  # [USES 20 UNITS] Infer the likely ethnicity/diaspora of up to 1000 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
  # @param [Hash] opts the optional parameters
  # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
  # @return [BatchFirstLastNameDiasporaedOut]
  describe 'diaspora_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gender
  # Infer the likely gender of a name.
  # @param first_name 
  # @param last_name 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameGenderedOut]
  describe 'gender test' do
    it 'should work' do
      first_name = 'William' # String | 
      last_name = 'Cheng' # String | 
      begin
        #Infer the likely gender of a name.
        result = @api_instance.gender(first_name, last_name)
      rescue NamSorClient::ApiError => e
        puts "Exception when calling PersonalApi->gender: #{e}"
      end

      expect(result.first_name).to eq("William")
      expect(result.last_name).to eq("Cheng")
      expect(result.likely_gender).to eq("male")
      expect(result.score).to be > 6
      expect(result.gender_scale).to eq(-1.0)

    end
  end

  # unit tests for gender_batch
  # Infer the likely gender of up to 1000 names, detecting automatically the cultural context.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
  # @return [BatchFirstLastNameGenderedOut]
  describe 'gender_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      opts = {
        # BatchFirstLastNameIn | A list of personal names
        :"batch_first_last_name_in" => NamSorClient::BatchFirstLastNameIn.new(:"personal_names" => [ 
          NamSorClient::FirstLastNameIn.new(:"id" => "1", :"first_name" => "William", :"last_name" => "Cheng"),
          NamSorClient::FirstLastNameIn.new(:"id" => "2", :"first_name" => "Elian", :"last_name" => "Carsenat")
        ])
      }
      begin
        #Infer the likely gender of up to 1000 names, detecting automatically the cultural context.
        result = @api_instance.gender_batch(opts)
      rescue NamSorClient::ApiError => e
        puts "Exception when calling PersonalApi->gender_batch: #{e}"
      end

      expect(result).not_to be_nil

      expect(result.personal_names[0].first_name).to eq("William")
      expect(result.personal_names[0].last_name).to eq("Cheng")
      expect(result.personal_names[0].likely_gender).to eq("male")
      expect(result.personal_names[0].score).to be > 6
      expect(result.personal_names[0].gender_scale).to eq(-1.0)

      expect(result.personal_names[1].first_name).to eq("Elian")
      expect(result.personal_names[1].last_name).to eq("Carsenat")
      expect(result.personal_names[1].likely_gender).to eq("male")
      expect(result.personal_names[1].score).to be > 3.5
      expect(result.personal_names[1].gender_scale).to eq(-1.0)
    end
  end

  # unit tests for gender_full
  # Infer the likely gender of a full name, ex. John H. Smith
  # @param full_name 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameGenderedOut]
  describe 'gender_full test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gender_full_batch
  # Infer the likely gender of up to 1000 full names, detecting automatically the cultural context.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
  # @return [BatchPersonalNameGenderedOut]
  describe 'gender_full_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gender_full_geo
  # Infer the likely gender of a full name, given a local context (ISO2 country code).
  # @param full_name 
  # @param country_iso2 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameGenderedOut]
  describe 'gender_full_geo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gender_full_geo_batch
  # Infer the likely gender of up to 1000 full names, with a given cultural context (country ISO2 code).
  # @param [Hash] opts the optional parameters
  # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names, with a country ISO2 code
  # @return [BatchPersonalNameGenderedOut]
  describe 'gender_full_geo_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gender_geo
  # Infer the likely gender of a name, given a local context (ISO2 country code).
  # @param first_name 
  # @param last_name 
  # @param country_iso2 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameGenderedOut]
  describe 'gender_geo test' do
    it 'should work' do
      first_name = 'William' # String | 
      last_name = 'Cheng' # String | 
      country_iso2 = 'US' # String |

      begin
        #Infer the likely gender of a name.
        result = @api_instance.gender_geo(first_name, last_name, country_iso2)
        #p result
      rescue NamSorClient::ApiError => e
        puts "Exception when calling PersonalApi->gender: #{e}"
      end

      expect(result.first_name).to eq("William")
      expect(result.last_name).to eq("Cheng")
      expect(result.likely_gender).to eq("male")
      expect(result.score).to be > 6
      expect(result.gender_scale).to eq(-1.0)
    end
  end

  # unit tests for gender_geo_batch
  # Infer the likely gender of up to 1000 names, each given a local context (ISO2 country code).
  # @param [Hash] opts the optional parameters
  # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of names, with country code.
  # @return [BatchFirstLastNameGenderedOut]
  describe 'gender_geo_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      opts = {
        :"batch_first_last_name_geo_in" => NamSorClient::BatchFirstLastNameGeoIn.new(:"personal_names" => [
          NamSorClient::FirstLastNameGeoIn.new(:"id" => "1", :"first_name" => "William", :"last_name" => "Cheng", :"country_iso2" => "UK"),
          NamSorClient::FirstLastNameGeoIn.new(:"id" => "2", :"first_name" => "Elian", :"last_name" => "Carsenat", :"country_iso2" => "JP")
        ])
      }
      begin
        result = @api_instance.gender_geo_batch(opts)
      rescue NamSorClient::ApiError => e
        puts "Exception when calling PersonalApi->gender_geo_batch: #{e}"
      end

      expect(result).not_to be_nil

      expect(result.personal_names[0].first_name).to eq("William")
      expect(result.personal_names[0].last_name).to eq("Cheng")
      expect(result.personal_names[0].likely_gender).to eq("male")
      expect(result.personal_names[0].score).to be > 6
      expect(result.personal_names[0].gender_scale).to eq(-1.0)

      expect(result.personal_names[1].first_name).to eq("Elian")
      expect(result.personal_names[1].last_name).to eq("Carsenat")
      expect(result.personal_names[1].likely_gender).to eq("male")
      expect(result.personal_names[1].score).to be > 3.5
      expect(result.personal_names[1].gender_scale).to eq(-1.0) 
    end
  end

  # unit tests for origin
  # [USES 10 UNITS] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
  # @param first_name 
  # @param last_name 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameOriginedOut]
  describe 'origin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      first_name = 'William' # String |
      last_name = 'Cheng' # String |

      begin
        #Infer the likely gender of a name.
        result = @api_instance.origin(first_name, last_name)
        #p result
      rescue NamSorClient::ApiError => e
        puts "Exception when calling PersonalApi->origin: #{e}"
      end

      expect(result.first_name).to eq("William")
      expect(result.last_name).to eq("Cheng")
      expect(result.score).to be > 3
      expect(result.country_origin).to eq("TW")
      expect(result.country_origin_alt).to eq("CN")
      expect(result.region_origin).to eq("Asia")
      expect(result.top_region_origin).to eq("Asia")
      expect(result.sub_region_origin).to eq("Eastern Asia")
    end
  end

  # unit tests for origin_batch
  # [USES 10 UNITS] Infer the likely country of origin of up to 1000 names, detecting automatically the cultural context.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
  # @return [BatchFirstLastNameOriginedOut]
  describe 'origin_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      opts = {
        :"batch_first_last_name_in" => NamSorClient::BatchFirstLastNameIn.new(:"personal_names" => [
          NamSorClient::FirstLastNameIn.new(:"id" => "1", :"first_name" => "William", :"last_name" => "Cheng"),
          NamSorClient::FirstLastNameIn.new(:"id" => "2", :"first_name" => "Elian", :"last_name" => "Carsenat")
        ])
      }
      begin
        result = @api_instance.origin_batch(opts)
      rescue NamSorClient::ApiError => e
        puts "Exception when calling PersonalApi->origin_batch: #{e}"
      end

      expect(result).not_to be_nil

      expect(result.personal_names[0].first_name).to eq("William")
      expect(result.personal_names[0].last_name).to eq("Cheng")
      expect(result.personal_names[0].score).to be > 2.5
      expect(result.personal_names[0].country_origin).to eq("TW")
      expect(result.personal_names[0].country_origin_alt).to eq("CN")
      expect(result.personal_names[0].region_origin).to eq("Asia")
      expect(result.personal_names[0].top_region_origin).to eq("Asia")
      expect(result.personal_names[0].sub_region_origin).to eq("Eastern Asia")

      expect(result.personal_names[1].first_name).to eq("Elian")
      expect(result.personal_names[1].last_name).to eq("Carsenat")
      expect(result.personal_names[1].score).to be > 2.5
      expect(result.personal_names[1].country_origin).to eq("FR")
      expect(result.personal_names[1].country_origin_alt).to eq("IL")
      expect(result.personal_names[1].region_origin).to eq("Europe")
      expect(result.personal_names[1].top_region_origin).to eq("Europe")
      expect(result.personal_names[1].sub_region_origin).to eq("Western Europe")
    end
  end

  # unit tests for parsed_gender_batch
  # Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchParsedFullNameIn] :batch_parsed_full_name_in A list of personal names
  # @return [BatchFirstLastNameGenderedOut]
  describe 'parsed_gender_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for parsed_gender_geo_batch
  # Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchParsedFullNameGeoIn] :batch_parsed_full_name_geo_in A list of personal names
  # @return [BatchFirstLastNameGenderedOut]
  describe 'parsed_gender_geo_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for us_race_ethnicity
  # [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy.
  # @param first_name 
  # @param last_name 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameUSRaceEthnicityOut]
  describe 'us_race_ethnicity test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for us_race_ethnicity_batch
  # [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
  # @return [BatchFirstLastNameUSRaceEthnicityOut]
  describe 'us_race_ethnicity_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for us_race_ethnicity_zip5
  # [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info.
  # @param first_name 
  # @param last_name 
  # @param zip5_code 
  # @param [Hash] opts the optional parameters
  # @return [FirstLastNameUSRaceEthnicityOut]
  describe 'us_race_ethnicity_zip5 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for us_zip_race_ethnicity_batch
  # [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
  # @param [Hash] opts the optional parameters
  # @option opts [BatchFirstLastNameGeoZippedIn] :batch_first_last_name_geo_zipped_in A list of personal names
  # @return [BatchFirstLastNameUSRaceEthnicityOut]
  describe 'us_zip_race_ethnicity_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
