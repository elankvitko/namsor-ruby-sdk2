=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

OpenAPI spec version: 2.0.2-beta
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'date'

module NamSorClient
  # Simple metrics on a classifier
  class ClassifierMetricsOut
    attr_accessor :learn_queue_size

    attr_accessor :buffer_size

    attr_accessor :pre_classify_queue_size

    attr_accessor :fact_keys_size

    attr_accessor :facts_learned

    attr_accessor :classify_durations_current

    attr_accessor :classify_durations_summary

    attr_accessor :learn_durations_current

    attr_accessor :learn_durations_summary

    attr_accessor :classifier_name

    attr_accessor :features_size

    attr_accessor :ai_vetted_estimate_total

    attr_accessor :ai_vetted_estimate_precision

    attr_accessor :ai_vetted_estimate_recall

    attr_accessor :ai_vetted_learn_total

    attr_accessor :ai_non_vetted_estimate_total

    attr_accessor :ai_non_vetted_estimate_precision

    attr_accessor :ai_non_vetted_estimate_recall

    attr_accessor :ai_non_vetted_learn_total

    attr_accessor :metric_time_stamp

    attr_accessor :ai_start_time

    attr_accessor :ai_vetted_expected_class_metrics

    attr_accessor :ai_non_vetted_expected_class_metrics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'learn_queue_size' => :'learnQueueSize',
        :'buffer_size' => :'bufferSize',
        :'pre_classify_queue_size' => :'preClassifyQueueSize',
        :'fact_keys_size' => :'factKeysSize',
        :'facts_learned' => :'factsLearned',
        :'classify_durations_current' => :'classifyDurationsCurrent',
        :'classify_durations_summary' => :'classifyDurationsSummary',
        :'learn_durations_current' => :'learnDurationsCurrent',
        :'learn_durations_summary' => :'learnDurationsSummary',
        :'classifier_name' => :'classifierName',
        :'features_size' => :'featuresSize',
        :'ai_vetted_estimate_total' => :'aiVettedEstimateTotal',
        :'ai_vetted_estimate_precision' => :'aiVettedEstimatePrecision',
        :'ai_vetted_estimate_recall' => :'aiVettedEstimateRecall',
        :'ai_vetted_learn_total' => :'aiVettedLearnTotal',
        :'ai_non_vetted_estimate_total' => :'aiNonVettedEstimateTotal',
        :'ai_non_vetted_estimate_precision' => :'aiNonVettedEstimatePrecision',
        :'ai_non_vetted_estimate_recall' => :'aiNonVettedEstimateRecall',
        :'ai_non_vetted_learn_total' => :'aiNonVettedLearnTotal',
        :'metric_time_stamp' => :'metricTimeStamp',
        :'ai_start_time' => :'aiStartTime',
        :'ai_vetted_expected_class_metrics' => :'aiVettedExpectedClassMetrics',
        :'ai_non_vetted_expected_class_metrics' => :'aiNonVettedExpectedClassMetrics'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'learn_queue_size' => :'Integer',
        :'buffer_size' => :'Integer',
        :'pre_classify_queue_size' => :'Integer',
        :'fact_keys_size' => :'Integer',
        :'facts_learned' => :'Integer',
        :'classify_durations_current' => :'Float',
        :'classify_durations_summary' => :'Float',
        :'learn_durations_current' => :'Float',
        :'learn_durations_summary' => :'Float',
        :'classifier_name' => :'String',
        :'features_size' => :'Integer',
        :'ai_vetted_estimate_total' => :'Integer',
        :'ai_vetted_estimate_precision' => :'Float',
        :'ai_vetted_estimate_recall' => :'Float',
        :'ai_vetted_learn_total' => :'Integer',
        :'ai_non_vetted_estimate_total' => :'Integer',
        :'ai_non_vetted_estimate_precision' => :'Float',
        :'ai_non_vetted_estimate_recall' => :'Float',
        :'ai_non_vetted_learn_total' => :'Integer',
        :'metric_time_stamp' => :'Integer',
        :'ai_start_time' => :'Integer',
        :'ai_vetted_expected_class_metrics' => :'Array<ExpectedClassMetricsOut>',
        :'ai_non_vetted_expected_class_metrics' => :'Array<ExpectedClassMetricsOut>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NamSorClient::ClassifierMetricsOut` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NamSorClient::ClassifierMetricsOut`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'learn_queue_size')
        self.learn_queue_size = attributes[:'learn_queue_size']
      end

      if attributes.key?(:'buffer_size')
        self.buffer_size = attributes[:'buffer_size']
      end

      if attributes.key?(:'pre_classify_queue_size')
        self.pre_classify_queue_size = attributes[:'pre_classify_queue_size']
      end

      if attributes.key?(:'fact_keys_size')
        self.fact_keys_size = attributes[:'fact_keys_size']
      end

      if attributes.key?(:'facts_learned')
        self.facts_learned = attributes[:'facts_learned']
      end

      if attributes.key?(:'classify_durations_current')
        self.classify_durations_current = attributes[:'classify_durations_current']
      end

      if attributes.key?(:'classify_durations_summary')
        self.classify_durations_summary = attributes[:'classify_durations_summary']
      end

      if attributes.key?(:'learn_durations_current')
        self.learn_durations_current = attributes[:'learn_durations_current']
      end

      if attributes.key?(:'learn_durations_summary')
        self.learn_durations_summary = attributes[:'learn_durations_summary']
      end

      if attributes.key?(:'classifier_name')
        self.classifier_name = attributes[:'classifier_name']
      end

      if attributes.key?(:'features_size')
        self.features_size = attributes[:'features_size']
      end

      if attributes.key?(:'ai_vetted_estimate_total')
        self.ai_vetted_estimate_total = attributes[:'ai_vetted_estimate_total']
      end

      if attributes.key?(:'ai_vetted_estimate_precision')
        self.ai_vetted_estimate_precision = attributes[:'ai_vetted_estimate_precision']
      end

      if attributes.key?(:'ai_vetted_estimate_recall')
        self.ai_vetted_estimate_recall = attributes[:'ai_vetted_estimate_recall']
      end

      if attributes.key?(:'ai_vetted_learn_total')
        self.ai_vetted_learn_total = attributes[:'ai_vetted_learn_total']
      end

      if attributes.key?(:'ai_non_vetted_estimate_total')
        self.ai_non_vetted_estimate_total = attributes[:'ai_non_vetted_estimate_total']
      end

      if attributes.key?(:'ai_non_vetted_estimate_precision')
        self.ai_non_vetted_estimate_precision = attributes[:'ai_non_vetted_estimate_precision']
      end

      if attributes.key?(:'ai_non_vetted_estimate_recall')
        self.ai_non_vetted_estimate_recall = attributes[:'ai_non_vetted_estimate_recall']
      end

      if attributes.key?(:'ai_non_vetted_learn_total')
        self.ai_non_vetted_learn_total = attributes[:'ai_non_vetted_learn_total']
      end

      if attributes.key?(:'metric_time_stamp')
        self.metric_time_stamp = attributes[:'metric_time_stamp']
      end

      if attributes.key?(:'ai_start_time')
        self.ai_start_time = attributes[:'ai_start_time']
      end

      if attributes.key?(:'ai_vetted_expected_class_metrics')
        if (value = attributes[:'ai_vetted_expected_class_metrics']).is_a?(Array)
          self.ai_vetted_expected_class_metrics = value
        end
      end

      if attributes.key?(:'ai_non_vetted_expected_class_metrics')
        if (value = attributes[:'ai_non_vetted_expected_class_metrics']).is_a?(Array)
          self.ai_non_vetted_expected_class_metrics = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          learn_queue_size == o.learn_queue_size &&
          buffer_size == o.buffer_size &&
          pre_classify_queue_size == o.pre_classify_queue_size &&
          fact_keys_size == o.fact_keys_size &&
          facts_learned == o.facts_learned &&
          classify_durations_current == o.classify_durations_current &&
          classify_durations_summary == o.classify_durations_summary &&
          learn_durations_current == o.learn_durations_current &&
          learn_durations_summary == o.learn_durations_summary &&
          classifier_name == o.classifier_name &&
          features_size == o.features_size &&
          ai_vetted_estimate_total == o.ai_vetted_estimate_total &&
          ai_vetted_estimate_precision == o.ai_vetted_estimate_precision &&
          ai_vetted_estimate_recall == o.ai_vetted_estimate_recall &&
          ai_vetted_learn_total == o.ai_vetted_learn_total &&
          ai_non_vetted_estimate_total == o.ai_non_vetted_estimate_total &&
          ai_non_vetted_estimate_precision == o.ai_non_vetted_estimate_precision &&
          ai_non_vetted_estimate_recall == o.ai_non_vetted_estimate_recall &&
          ai_non_vetted_learn_total == o.ai_non_vetted_learn_total &&
          metric_time_stamp == o.metric_time_stamp &&
          ai_start_time == o.ai_start_time &&
          ai_vetted_expected_class_metrics == o.ai_vetted_expected_class_metrics &&
          ai_non_vetted_expected_class_metrics == o.ai_non_vetted_expected_class_metrics
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [learn_queue_size, buffer_size, pre_classify_queue_size, fact_keys_size, facts_learned, classify_durations_current, classify_durations_summary, learn_durations_current, learn_durations_summary, classifier_name, features_size, ai_vetted_estimate_total, ai_vetted_estimate_precision, ai_vetted_estimate_recall, ai_vetted_learn_total, ai_non_vetted_estimate_total, ai_non_vetted_estimate_precision, ai_non_vetted_estimate_recall, ai_non_vetted_learn_total, metric_time_stamp, ai_start_time, ai_vetted_expected_class_metrics, ai_non_vetted_expected_class_metrics].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        NamSorClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
