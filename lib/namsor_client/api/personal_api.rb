=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

OpenAPI spec version: 2.0.2-beta
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'uri'

module NamSorClient
  class PersonalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [USES 10 UNITS] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
    # @param personal_name_full 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGeoOut]
    def country(personal_name_full, opts = {})
      data, _status_code, _headers = country_with_http_info(personal_name_full, opts)
      data
    end

    # [USES 10 UNITS] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
    # @param personal_name_full 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGeoOut, Fixnum, Hash)>] PersonalNameGeoOut data, response status code and response headers
    def country_with_http_info(personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.country ...'
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.country"
      end
      # resource path
      local_var_path = '/api2/json/country/{personalNameFull}'.sub('{' + 'personalNameFull' + '}', personal_name_full.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonalNameGeoOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer the likely country of residence of up to 1000 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameGeoOut]
    def country_batch(opts = {})
      data, _status_code, _headers = country_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS] Infer the likely country of residence of up to 1000 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameGeoOut, Fixnum, Hash)>] BatchPersonalNameGeoOut data, response status code and response headers
    def country_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.country_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/countryBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_personal_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchPersonalNameGeoOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#country_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param country_iso2 
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameDiasporaedOut]
    def diaspora(country_iso2, first_name, last_name, opts = {})
      data, _status_code, _headers = diaspora_with_http_info(country_iso2, first_name, last_name, opts)
      data
    end

    # [USES 20 UNITS] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param country_iso2 
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameDiasporaedOut, Fixnum, Hash)>] FirstLastNameDiasporaedOut data, response status code and response headers
    def diaspora_with_http_info(country_iso2, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.diaspora ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.diaspora"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.diaspora"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.diaspora"
      end
      # resource path
      local_var_path = '/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}'.sub('{' + 'countryIso2' + '}', country_iso2.to_s).sub('{' + 'firstName' + '}', first_name.to_s).sub('{' + 'lastName' + '}', last_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameDiasporaedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#diaspora\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS] Infer the likely ethnicity/diaspora of up to 1000 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchFirstLastNameDiasporaedOut]
    def diaspora_batch(opts = {})
      data, _status_code, _headers = diaspora_batch_with_http_info(opts)
      data
    end

    # [USES 20 UNITS] Infer the likely ethnicity/diaspora of up to 1000 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameDiasporaedOut, Fixnum, Hash)>] BatchFirstLastNameDiasporaedOut data, response status code and response headers
    def diaspora_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.diaspora_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/diasporaBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameDiasporaedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#diaspora_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a name.
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender(first_name, last_name, opts = {})
      data, _status_code, _headers = gender_with_http_info(first_name, last_name, opts)
      data
    end

    # Infer the likely gender of a name.
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Fixnum, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.gender"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.gender"
      end
      # resource path
      local_var_path = '/api2/json/gender/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', first_name.to_s).sub('{' + 'lastName' + '}', last_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 1000 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [BatchFirstLastNameGenderedOut]
    def gender_batch(opts = {})
      data, _status_code, _headers = gender_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 1000 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [Array<(BatchFirstLastNameGenderedOut, Fixnum, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def gender_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a full name, ex. John H. Smith
    # @param full_name 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender_full(full_name, opts = {})
      data, _status_code, _headers = gender_full_with_http_info(full_name, opts)
      data
    end

    # Infer the likely gender of a full name, ex. John H. Smith
    # @param full_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Fixnum, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_full_with_http_info(full_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full ...'
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling PersonalApi.gender_full"
      end
      # resource path
      local_var_path = '/api2/json/genderFull/{fullName}'.sub('{' + 'fullName' + '}', full_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 1000 full names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameGenderedOut]
    def gender_full_batch(opts = {})
      data, _status_code, _headers = gender_full_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 1000 full names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameGenderedOut, Fixnum, Hash)>] BatchPersonalNameGenderedOut data, response status code and response headers
    def gender_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderFullBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_personal_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchPersonalNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a full name, given a local context (ISO2 country code).
    # @param full_name 
    # @param country_iso2 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender_full_geo(full_name, country_iso2, opts = {})
      data, _status_code, _headers = gender_full_geo_with_http_info(full_name, country_iso2, opts)
      data
    end

    # Infer the likely gender of a full name, given a local context (ISO2 country code).
    # @param full_name 
    # @param country_iso2 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Fixnum, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_full_geo_with_http_info(full_name, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full_geo ...'
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling PersonalApi.gender_full_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.gender_full_geo"
      end
      # resource path
      local_var_path = '/api2/json/genderFullGeo/{fullName}/{countryIso2}'.sub('{' + 'fullName' + '}', full_name.to_s).sub('{' + 'countryIso2' + '}', country_iso2.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 1000 full names, with a given cultural context (country ISO2 code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names, with a country ISO2 code
    # @return [BatchPersonalNameGenderedOut]
    def gender_full_geo_batch(opts = {})
      data, _status_code, _headers = gender_full_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 1000 full names, with a given cultural context (country ISO2 code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names, with a country ISO2 code
    # @return [Array<(BatchPersonalNameGenderedOut, Fixnum, Hash)>] BatchPersonalNameGenderedOut data, response status code and response headers
    def gender_full_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderFullGeoBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchPersonalNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a name, given a local context (ISO2 country code).
    # @param first_name 
    # @param last_name 
    # @param country_iso2 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender_geo(first_name, last_name, country_iso2, opts = {})
      data, _status_code, _headers = gender_geo_with_http_info(first_name, last_name, country_iso2, opts)
      data
    end

    # Infer the likely gender of a name, given a local context (ISO2 country code).
    # @param first_name 
    # @param last_name 
    # @param country_iso2 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Fixnum, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_geo_with_http_info(first_name, last_name, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_geo ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.gender_geo"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.gender_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.gender_geo"
      end
      # resource path
      local_var_path = '/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}'.sub('{' + 'firstName' + '}', first_name.to_s).sub('{' + 'lastName' + '}', last_name.to_s).sub('{' + 'countryIso2' + '}', country_iso2.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 1000 names, each given a local context (ISO2 country code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of names, with country code.
    # @return [BatchFirstLastNameGenderedOut]
    def gender_geo_batch(opts = {})
      data, _status_code, _headers = gender_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 1000 names, each given a local context (ISO2 country code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of names, with country code.
    # @return [Array<(BatchFirstLastNameGenderedOut, Fixnum, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def gender_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderGeoBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameOriginedOut]
    def origin(first_name, last_name, opts = {})
      data, _status_code, _headers = origin_with_http_info(first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameOriginedOut, Fixnum, Hash)>] FirstLastNameOriginedOut data, response status code and response headers
    def origin_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.origin ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.origin"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.origin"
      end
      # resource path
      local_var_path = '/api2/json/origin/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', first_name.to_s).sub('{' + 'lastName' + '}', last_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameOriginedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#origin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer the likely country of origin of up to 1000 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [BatchFirstLastNameOriginedOut]
    def origin_batch(opts = {})
      data, _status_code, _headers = origin_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS] Infer the likely country of origin of up to 1000 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [Array<(BatchFirstLastNameOriginedOut, Fixnum, Hash)>] BatchFirstLastNameOriginedOut data, response status code and response headers
    def origin_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.origin_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/originBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameOriginedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#origin_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
    # @param name_full 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def parse_name(name_full, opts = {})
      data, _status_code, _headers = parse_name_with_http_info(name_full, opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
    # @param name_full 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Fixnum, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def parse_name_with_http_info(name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name ...'
      end
      # verify the required parameter 'name_full' is set
      if @api_client.config.client_side_validation && name_full.nil?
        fail ArgumentError, "Missing the required parameter 'name_full' when calling PersonalApi.parse_name"
      end
      # resource path
      local_var_path = '/api2/json/parseName/{nameFull}'.sub('{' + 'nameFull' + '}', name_full.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonalNameParsedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameParsedOut]
    def parse_name_batch(opts = {})
      data, _status_code, _headers = parse_name_batch_with_http_info(opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameParsedOut, Fixnum, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def parse_name_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parseNameBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_personal_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchPersonalNameParsedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
    # @param name_full 
    # @param country_iso2 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def parse_name_geo(name_full, country_iso2, opts = {})
      data, _status_code, _headers = parse_name_geo_with_http_info(name_full, country_iso2, opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
    # @param name_full 
    # @param country_iso2 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Fixnum, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def parse_name_geo_with_http_info(name_full, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name_geo ...'
      end
      # verify the required parameter 'name_full' is set
      if @api_client.config.client_side_validation && name_full.nil?
        fail ArgumentError, "Missing the required parameter 'name_full' when calling PersonalApi.parse_name_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.parse_name_geo"
      end
      # resource path
      local_var_path = '/api2/json/parseName/{nameFull}/{countryIso2}'.sub('{' + 'nameFull' + '}', name_full.to_s).sub('{' + 'countryIso2' + '}', country_iso2.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonalNameParsedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchPersonalNameParsedOut]
    def parse_name_geo_batch(opts = {})
      data, _status_code, _headers = parse_name_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchPersonalNameParsedOut, Fixnum, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def parse_name_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parseNameGeoBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchPersonalNameParsedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchParsedFullNameIn] :batch_parsed_full_name_in A list of personal names
    # @return [BatchFirstLastNameGenderedOut]
    def parsed_gender_batch(opts = {})
      data, _status_code, _headers = parsed_gender_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchParsedFullNameIn] :batch_parsed_full_name_in A list of personal names
    # @return [Array<(BatchFirstLastNameGenderedOut, Fixnum, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def parsed_gender_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parsed_gender_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parsedGenderBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_parsed_full_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parsed_gender_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchParsedFullNameGeoIn] :batch_parsed_full_name_geo_in A list of personal names
    # @return [BatchFirstLastNameGenderedOut]
    def parsed_gender_geo_batch(opts = {})
      data, _status_code, _headers = parsed_gender_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchParsedFullNameGeoIn] :batch_parsed_full_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameGenderedOut, Fixnum, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def parsed_gender_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parsed_gender_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parsedGenderGeoBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_parsed_full_name_geo_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameGenderedOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parsed_gender_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameUSRaceEthnicityOut]
    def us_race_ethnicity(first_name, last_name, opts = {})
      data, _status_code, _headers = us_race_ethnicity_with_http_info(first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
    # @param first_name 
    # @param last_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameUSRaceEthnicityOut, Fixnum, Hash)>] FirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.us_race_ethnicity"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.us_race_ethnicity"
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicity/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', first_name.to_s).sub('{' + 'lastName' + '}', last_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameUSRaceEthnicityOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer up-to 1000 US resident's likely race/ethnicity according to US Census taxonomy.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchFirstLastNameUSRaceEthnicityOut]
    def us_race_ethnicity_batch(opts = {})
      data, _status_code, _headers = us_race_ethnicity_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameUSRaceEthnicityOut, Fixnum, Hash)>] BatchFirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicityBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameUSRaceEthnicityOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
    # @param first_name 
    # @param last_name 
    # @param zip5_code 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameUSRaceEthnicityOut]
    def us_race_ethnicity_zip5(first_name, last_name, zip5_code, opts = {})
      data, _status_code, _headers = us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, opts)
      data
    end

    # [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).
    # @param first_name 
    # @param last_name 
    # @param zip5_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameUSRaceEthnicityOut, Fixnum, Hash)>] FirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity_zip5 ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.us_race_ethnicity_zip5"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.us_race_ethnicity_zip5"
      end
      # verify the required parameter 'zip5_code' is set
      if @api_client.config.client_side_validation && zip5_code.nil?
        fail ArgumentError, "Missing the required parameter 'zip5_code' when calling PersonalApi.us_race_ethnicity_zip5"
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}'.sub('{' + 'firstName' + '}', first_name.to_s).sub('{' + 'lastName' + '}', last_name.to_s).sub('{' + 'zip5Code' + '}', zip5_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FirstLastNameUSRaceEthnicityOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity_zip5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS] Infer up-to 1000 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoZippedIn] :batch_first_last_name_geo_zipped_in A list of personal names
    # @return [BatchFirstLastNameUSRaceEthnicityOut]
    def us_zip_race_ethnicity_batch(opts = {})
      data, _status_code, _headers = us_zip_race_ethnicity_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoZippedIn] :batch_first_last_name_geo_zipped_in A list of personal names
    # @return [Array<(BatchFirstLastNameUSRaceEthnicityOut, Fixnum, Hash)>] BatchFirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_zip_race_ethnicity_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_zip_race_ethnicity_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/usZipRaceEthnicityBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_zipped_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchFirstLastNameUSRaceEthnicityOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_zip_race_ethnicity_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
