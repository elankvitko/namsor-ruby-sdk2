=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

OpenAPI spec version: 2.0.2-beta
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'uri'

module NamSorClient
  class ChineseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Identify Chinese name candidates, based on the romanized name.
    # @param chinese_surname_latin 
    # @param chinese_given_name_latin 
    # @param [Hash] opts the optional parameters
    # @return [RomanizedNameOut]
    def chinese_name_candidates(chinese_surname_latin, chinese_given_name_latin, opts = {})
      data, _status_code, _headers = chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name.
    # @param chinese_surname_latin 
    # @param chinese_given_name_latin 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RomanizedNameOut, Fixnum, Hash)>] RomanizedNameOut data, response status code and response headers
    def chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_candidates ...'
      end
      # verify the required parameter 'chinese_surname_latin' is set
      if @api_client.config.client_side_validation && chinese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_surname_latin' when calling ChineseApi.chinese_name_candidates"
      end
      # verify the required parameter 'chinese_given_name_latin' is set
      if @api_client.config.client_side_validation && chinese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_given_name_latin' when calling ChineseApi.chinese_name_candidates"
      end
      # resource path
      local_var_path = '/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}'.sub('{' + 'chineseSurnameLatin' + '}', chinese_surname_latin.to_s).sub('{' + 'chineseGivenNameLatin' + '}', chinese_given_name_latin.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RomanizedNameOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [BatchNameMatchCandidatesOut]
    def chinese_name_candidates_batch(opts = {})
      data, _status_code, _headers = chinese_name_candidates_batch_with_http_info(opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [Array<(BatchNameMatchCandidatesOut, Fixnum, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def chinese_name_candidates_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_candidates_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/chineseNameCandidatesBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchNameMatchCandidatesOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_candidates_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [BatchNameMatchCandidatesOut]
    def chinese_name_candidates_gender_batch(opts = {})
      data, _status_code, _headers = chinese_name_candidates_gender_batch_with_http_info(opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [Array<(BatchNameMatchCandidatesOut, Fixnum, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def chinese_name_candidates_gender_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_candidates_gender_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/chineseNameCandidatesGenderBatch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchNameMatchCandidatesOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_candidates_gender_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name - having a known gender ('male' or 'female')
    # @param chinese_surname_latin 
    # @param chinese_given_name_latin 
    # @param known_gender 
    # @param [Hash] opts the optional parameters
    # @return [RomanizedNameOut]
    def chinese_name_gender_candidates(chinese_surname_latin, chinese_given_name_latin, known_gender, opts = {})
      data, _status_code, _headers = chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name - having a known gender (&#39;male&#39; or &#39;female&#39;)
    # @param chinese_surname_latin 
    # @param chinese_given_name_latin 
    # @param known_gender 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RomanizedNameOut, Fixnum, Hash)>] RomanizedNameOut data, response status code and response headers
    def chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_gender_candidates ...'
      end
      # verify the required parameter 'chinese_surname_latin' is set
      if @api_client.config.client_side_validation && chinese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_surname_latin' when calling ChineseApi.chinese_name_gender_candidates"
      end
      # verify the required parameter 'chinese_given_name_latin' is set
      if @api_client.config.client_side_validation && chinese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_given_name_latin' when calling ChineseApi.chinese_name_gender_candidates"
      end
      # verify the required parameter 'known_gender' is set
      if @api_client.config.client_side_validation && known_gender.nil?
        fail ArgumentError, "Missing the required parameter 'known_gender' when calling ChineseApi.chinese_name_gender_candidates"
      end
      # resource path
      local_var_path = '/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}'.sub('{' + 'chineseSurnameLatin' + '}', chinese_surname_latin.to_s).sub('{' + 'chineseGivenNameLatin' + '}', chinese_given_name_latin.to_s).sub('{' + 'knownGender' + '}', known_gender.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RomanizedNameOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_gender_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
