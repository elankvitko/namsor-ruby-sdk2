=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

OpenAPI spec version: 2.0.2-beta
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'uri'

module NamSorClient
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Print current API usage.
    # @param [Hash] opts the optional parameters
    # @return [APIPeriodUsageOut]
    def api_usage(opts = {})
      data, _status_code, _headers = api_usage_with_http_info(opts)
      data
    end

    # Print current API usage.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPeriodUsageOut, Fixnum, Hash)>] APIPeriodUsageOut data, response status code and response headers
    def api_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_usage ...'
      end
      # resource path
      local_var_path = '/api2/json/apiUsage'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPeriodUsageOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print historical API usage.
    # @param [Hash] opts the optional parameters
    # @return [APIPeriodUsageOut]
    def api_usage_history(opts = {})
      data, _status_code, _headers = api_usage_history_with_http_info(opts)
      data
    end

    # Print historical API usage.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPeriodUsageOut, Fixnum, Hash)>] APIPeriodUsageOut data, response status code and response headers
    def api_usage_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_usage_history ...'
      end
      # resource path
      local_var_path = '/api2/json/apiUsageHistory'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPeriodUsageOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_usage_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print historical API usage (in an aggregated view, by service, by day/hour/min).
    # @param [Hash] opts the optional parameters
    # @return [APIPeriodUsageOut]
    def api_usage_history_aggregate(opts = {})
      data, _status_code, _headers = api_usage_history_aggregate_with_http_info(opts)
      data
    end

    # Print historical API usage (in an aggregated view, by service, by day/hour/min).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPeriodUsageOut, Fixnum, Hash)>] APIPeriodUsageOut data, response status code and response headers
    def api_usage_history_aggregate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_usage_history_aggregate ...'
      end
      # resource path
      local_var_path = '/api2/json/apiUsageHistoryAggregate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPeriodUsageOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_usage_history_aggregate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all available plans in the default currency (usd).
    # @param [Hash] opts the optional parameters
    # @return [APIPlansOut]
    def available_plans(opts = {})
      data, _status_code, _headers = available_plans_with_http_info(opts)
      data
    end

    # List all available plans in the default currency (usd).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPlansOut, Fixnum, Hash)>] APIPlansOut data, response status code and response headers
    def available_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.available_plans ...'
      end
      # resource path
      local_var_path = '/api2/json/availablePlans'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPlansOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#available_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all available plans in the user's preferred currency.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIPlansOut]
    def available_plans1(token, opts = {})
      data, _status_code, _headers = available_plans1_with_http_info(token, opts)
      data
    end

    # List all available plans in the user&#39;s preferred currency.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPlansOut, Fixnum, Hash)>] APIPlansOut data, response status code and response headers
    def available_plans1_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.available_plans1 ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.available_plans1"
      end
      # resource path
      local_var_path = '/api2/json/availablePlans/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPlansOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#available_plans1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of API services and usage cost in Units (default is 1=ONE Unit).
    # @param [Hash] opts the optional parameters
    # @return [APIPlansOut]
    def available_services(opts = {})
      data, _status_code, _headers = available_services_with_http_info(opts)
      data
    end

    # List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPlansOut, Fixnum, Hash)>] APIPlansOut data, response status code and response headers
    def available_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.available_services ...'
      end
      # resource path
      local_var_path = '/api2/json/apiServices'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPlansOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#available_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List possible currency options for billing (USD, EUR, GBP, ...)
    # @param [Hash] opts the optional parameters
    # @return [CurrenciesOut]
    def billing_currencies(opts = {})
      data, _status_code, _headers = billing_currencies_with_http_info(opts)
      data
    end

    # List possible currency options for billing (USD, EUR, GBP, ...)
    # @param [Hash] opts the optional parameters
    # @return [Array<(CurrenciesOut, Fixnum, Hash)>] CurrenciesOut data, response status code and response headers
    def billing_currencies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.billing_currencies ...'
      end
      # resource path
      local_var_path = '/api2/json/billingCurrencies'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrenciesOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#billing_currencies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the history billing information (invoices paid via Stripe or manually).
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [BillingHistoryOut]
    def billing_history(token, opts = {})
      data, _status_code, _headers = billing_history_with_http_info(token, opts)
      data
    end

    # Read the history billing information (invoices paid via Stripe or manually).
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingHistoryOut, Fixnum, Hash)>] BillingHistoryOut data, response status code and response headers
    def billing_history_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.billing_history ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.billing_history"
      end
      # resource path
      local_var_path = '/api2/json/billingHistory/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BillingHistoryOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#billing_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the billing information (company name, address, phone, vat ID)
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [BillingInfoInOut]
    def billing_info(token, opts = {})
      data, _status_code, _headers = billing_info_with_http_info(token, opts)
      data
    end

    # Read the billing information (company name, address, phone, vat ID)
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingInfoInOut, Fixnum, Hash)>] BillingInfoInOut data, response status code and response headers
    def billing_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.billing_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.billing_info"
      end
      # resource path
      local_var_path = '/api2/json/billingInfo/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BillingInfoInOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#billing_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [APIKeyOut]
    def charge(opts = {})
      data, _status_code, _headers = charge_with_http_info(opts)
      data
    end

    # Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def charge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.charge ...'
      end
      # resource path
      local_var_path = '/api2/json/charge'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'inline_object'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Setting an API Key to a corporate status.
    # @param api_key 
    # @param corporate 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def corporate_key(api_key, corporate, opts = {})
      corporate_key_with_http_info(api_key, corporate, opts)
      nil
    end

    # Setting an API Key to a corporate status.
    # @param api_key 
    # @param corporate 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def corporate_key_with_http_info(api_key, corporate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.corporate_key ...'
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling AdminApi.corporate_key"
      end
      # verify the required parameter 'corporate' is set
      if @api_client.config.client_side_validation && corporate.nil?
        fail ArgumentError, "Missing the required parameter 'corporate' when calling AdminApi.corporate_key"
      end
      # resource path
      local_var_path = '/api2/json/corporateKey/{apiKey}/{corporate}'.sub('{' + 'apiKey' + '}', api_key.to_s).sub('{' + 'corporate' + '}', corporate.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#corporate_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update debug level for a classifier
    # @param logger 
    # @param level 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def debug_level(logger, level, opts = {})
      debug_level_with_http_info(logger, level, opts)
      nil
    end

    # Update debug level for a classifier
    # @param logger 
    # @param level 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def debug_level_with_http_info(logger, level, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.debug_level ...'
      end
      # verify the required parameter 'logger' is set
      if @api_client.config.client_side_validation && logger.nil?
        fail ArgumentError, "Missing the required parameter 'logger' when calling AdminApi.debug_level"
      end
      # verify the required parameter 'level' is set
      if @api_client.config.client_side_validation && level.nil?
        fail ArgumentError, "Missing the required parameter 'level' when calling AdminApi.debug_level"
      end
      # resource path
      local_var_path = '/api2/json/debugLevel/{logger}/{level}'.sub('{' + 'logger' + '}', logger.to_s).sub('{' + 'level' + '}', level.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#debug_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidate system caches.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def invalidate_cache(opts = {})
      invalidate_cache_with_http_info(opts)
      nil
    end

    # Invalidate system caches.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def invalidate_cache_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.invalidate_cache ...'
      end
      # resource path
      local_var_path = '/api2/json/invalidateCache'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#invalidate_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate/deactivate learning from a source.
    # @param source 
    # @param learnable 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def learnable(source, learnable, opts = {})
      learnable_with_http_info(source, learnable, opts)
      nil
    end

    # Activate/deactivate learning from a source.
    # @param source 
    # @param learnable 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def learnable_with_http_info(source, learnable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.learnable ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.learnable"
      end
      # verify the required parameter 'learnable' is set
      if @api_client.config.client_side_validation && learnable.nil?
        fail ArgumentError, "Missing the required parameter 'learnable' when calling AdminApi.learnable"
      end
      # resource path
      local_var_path = '/api2/json/learnable/{source}/{learnable}'.sub('{' + 'source' + '}', source.to_s).sub('{' + 'learnable' + '}', learnable.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#learnable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the overall API counter
    # @param [Hash] opts the optional parameters
    # @return [SoftwareVersionOut]
    def namsor_counter(opts = {})
      data, _status_code, _headers = namsor_counter_with_http_info(opts)
      data
    end

    # Get the overall API counter
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareVersionOut, Fixnum, Hash)>] SoftwareVersionOut data, response status code and response headers
    def namsor_counter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.namsor_counter ...'
      end
      # resource path
      local_var_path = '/api2/json/namsorCounter'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SoftwareVersionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#namsor_counter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Stripe payment information associated with the current google auth session token.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def payment_info(token, opts = {})
      data, _status_code, _headers = payment_info_with_http_info(token, opts)
      data
    end

    # Get the Stripe payment information associated with the current google auth session token.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def payment_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.payment_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.payment_info"
      end
      # resource path
      local_var_path = '/api2/json/paymentInfo/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#payment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def procure_key(token, opts = {})
      data, _status_code, _headers = procure_key_with_http_info(token, opts)
      data
    end

    # Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def procure_key_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.procure_key ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.procure_key"
      end
      # resource path
      local_var_path = '/api2/json/procureKey/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#procure_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Redeploy UI from current dev branch.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def redeploy_ui(opts = {})
      redeploy_ui_with_http_info(opts)
      nil
    end

    # Redeploy UI from current dev branch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def redeploy_ui_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.redeploy_ui ...'
      end
      # resource path
      local_var_path = '/api2/json/redeployUI'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#redeploy_ui\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Redeploy UI from current dev branch.
    # @param live 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def redeploy_ui1(live, opts = {})
      redeploy_ui1_with_http_info(live, opts)
      nil
    end

    # Redeploy UI from current dev branch.
    # @param live 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def redeploy_ui1_with_http_info(live, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.redeploy_ui1 ...'
      end
      # verify the required parameter 'live' is set
      if @api_client.config.client_side_validation && live.nil?
        fail ArgumentError, "Missing the required parameter 'live' when calling AdminApi.redeploy_ui1"
      end
      # resource path
      local_var_path = '/api2/json/redeployUI/{live}'.sub('{' + 'live' + '}', live.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#redeploy_ui1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe to a give API plan, using the user's preferred or default currency.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIPlanSubscriptionOut]
    def remove_user_account(token, opts = {})
      data, _status_code, _headers = remove_user_account_with_http_info(token, opts)
      data
    end

    # Subscribe to a give API plan, using the user&#39;s preferred or default currency.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPlanSubscriptionOut, Fixnum, Hash)>] APIPlanSubscriptionOut data, response status code and response headers
    def remove_user_account_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.remove_user_account ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.remove_user_account"
      end
      # resource path
      local_var_path = '/api2/json/removeUserAccount/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPlanSubscriptionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#remove_user_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop learning and shutdown system.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def shutdown(opts = {})
      shutdown_with_http_info(opts)
      nil
    end

    # Stop learning and shutdown system.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def shutdown_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.shutdown ...'
      end
      # resource path
      local_var_path = '/api2/json/shutdown'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#shutdown\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current software version
    # @param [Hash] opts the optional parameters
    # @return [SoftwareVersionOut]
    def software_version(opts = {})
      data, _status_code, _headers = software_version_with_http_info(opts)
      data
    end

    # Get the current software version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareVersionOut, Fixnum, Hash)>] SoftwareVersionOut data, response status code and response headers
    def software_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.software_version ...'
      end
      # resource path
      local_var_path = '/api2/json/softwareVersion'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SoftwareVersionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#software_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print basic source statistics.
    # @param source 
    # @param [Hash] opts the optional parameters
    # @return [SystemMetricsOut]
    def source_stats(source, opts = {})
      data, _status_code, _headers = source_stats_with_http_info(source, opts)
      data
    end

    # Print basic source statistics.
    # @param source 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemMetricsOut, Fixnum, Hash)>] SystemMetricsOut data, response status code and response headers
    def source_stats_with_http_info(source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.source_stats ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.source_stats"
      end
      # resource path
      local_var_path = '/api2/json/sourceStats/{source}'.sub('{' + 'source' + '}', source.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SystemMetricsOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#source_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print basic system statistics.
    # @param [Hash] opts the optional parameters
    # @return [SystemMetricsOut]
    def stats(opts = {})
      data, _status_code, _headers = stats_with_http_info(opts)
      data
    end

    # Print basic system statistics.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemMetricsOut, Fixnum, Hash)>] SystemMetricsOut data, response status code and response headers
    def stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.stats ...'
      end
      # resource path
      local_var_path = '/api2/json/stats'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SystemMetricsOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Connects a Stripe Account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @option opts [String] :code 
    # @option opts [String] :error 
    # @option opts [String] :error_description 
    # @return [nil]
    def stripe_connect(opts = {})
      stripe_connect_with_http_info(opts)
      nil
    end

    # Connects a Stripe Account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @option opts [String] :code 
    # @option opts [String] :error 
    # @option opts [String] :error_description 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stripe_connect_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.stripe_connect ...'
      end
      # resource path
      local_var_path = '/api2/json/stripeConnect'

      # query parameters
      query_params = {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'error'] = opts[:'error'] if !opts[:'error'].nil?
      query_params[:'error_description'] = opts[:'error_description'] if !opts[:'error_description'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#stripe_connect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe to a give API plan, using the user's preferred or default currency.
    # @param plan_name 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIPlanSubscriptionOut]
    def subscribe_plan(plan_name, token, opts = {})
      data, _status_code, _headers = subscribe_plan_with_http_info(plan_name, token, opts)
      data
    end

    # Subscribe to a give API plan, using the user&#39;s preferred or default currency.
    # @param plan_name 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPlanSubscriptionOut, Fixnum, Hash)>] APIPlanSubscriptionOut data, response status code and response headers
    def subscribe_plan_with_http_info(plan_name, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.subscribe_plan ...'
      end
      # verify the required parameter 'plan_name' is set
      if @api_client.config.client_side_validation && plan_name.nil?
        fail ArgumentError, "Missing the required parameter 'plan_name' when calling AdminApi.subscribe_plan"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.subscribe_plan"
      end
      # resource path
      local_var_path = '/api2/json/subscribePlan/{planName}/{token}'.sub('{' + 'planName' + '}', plan_name.to_s).sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPlanSubscriptionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#subscribe_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets or update the billing information (company name, address, phone, vat ID)
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [BillingInfoInOut] :billing_info_in_out 
    # @return [BillingInfoInOut]
    def update_billing_info(token, opts = {})
      data, _status_code, _headers = update_billing_info_with_http_info(token, opts)
      data
    end

    # Sets or update the billing information (company name, address, phone, vat ID)
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [BillingInfoInOut] :billing_info_in_out 
    # @return [Array<(BillingInfoInOut, Fixnum, Hash)>] BillingInfoInOut data, response status code and response headers
    def update_billing_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_billing_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.update_billing_info"
      end
      # resource path
      local_var_path = '/api2/json/updateBillingInfo/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'billing_info_in_out'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BillingInfoInOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_billing_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modifies the hard/soft limit on the API plan's overages (default is 0$ soft limit).
    # @param usage_limit 
    # @param hard_or_soft 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIPeriodUsageOut]
    def update_limit(usage_limit, hard_or_soft, token, opts = {})
      data, _status_code, _headers = update_limit_with_http_info(usage_limit, hard_or_soft, token, opts)
      data
    end

    # Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
    # @param usage_limit 
    # @param hard_or_soft 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPeriodUsageOut, Fixnum, Hash)>] APIPeriodUsageOut data, response status code and response headers
    def update_limit_with_http_info(usage_limit, hard_or_soft, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_limit ...'
      end
      # verify the required parameter 'usage_limit' is set
      if @api_client.config.client_side_validation && usage_limit.nil?
        fail ArgumentError, "Missing the required parameter 'usage_limit' when calling AdminApi.update_limit"
      end
      # verify the required parameter 'hard_or_soft' is set
      if @api_client.config.client_side_validation && hard_or_soft.nil?
        fail ArgumentError, "Missing the required parameter 'hard_or_soft' when calling AdminApi.update_limit"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.update_limit"
      end
      # resource path
      local_var_path = '/api2/json/updateLimit/{usageLimit}/{hardOrSoft}/{token}'.sub('{' + 'usageLimit' + '}', usage_limit.to_s).sub('{' + 'hardOrSoft' + '}', hard_or_soft.to_s).sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIPeriodUsageOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the default Stripe card associated with the current google auth session token.
    # @param defaut_source_id 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def update_payment_default(defaut_source_id, token, opts = {})
      data, _status_code, _headers = update_payment_default_with_http_info(defaut_source_id, token, opts)
      data
    end

    # Update the default Stripe card associated with the current google auth session token.
    # @param defaut_source_id 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def update_payment_default_with_http_info(defaut_source_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_payment_default ...'
      end
      # verify the required parameter 'defaut_source_id' is set
      if @api_client.config.client_side_validation && defaut_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'defaut_source_id' when calling AdminApi.update_payment_default"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.update_payment_default"
      end
      # resource path
      local_var_path = '/api2/json/updatePaymentDefault/{defautSourceId}/{token}'.sub('{' + 'defautSourceId' + '}', defaut_source_id.to_s).sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_payment_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the user profile associated with the current google auth session token.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def user_info(token, opts = {})
      data, _status_code, _headers = user_info_with_http_info(token, opts)
      data
    end

    # Get the user profile associated with the current google auth session token.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def user_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.user_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.user_info"
      end
      # resource path
      local_var_path = '/api2/json/userInfo/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies an email, based on token sent to that email
    # @param email_token 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def verify_email(email_token, opts = {})
      data, _status_code, _headers = verify_email_with_http_info(email_token, opts)
      data
    end

    # Verifies an email, based on token sent to that email
    # @param email_token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def verify_email_with_http_info(email_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.verify_email ...'
      end
      # verify the required parameter 'email_token' is set
      if @api_client.config.client_side_validation && email_token.nil?
        fail ArgumentError, "Missing the required parameter 'email_token' when calling AdminApi.verify_email"
      end
      # resource path
      local_var_path = '/api2/json/verifyEmail/{emailToken}'.sub('{' + 'emailToken' + '}', email_token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#verify_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies an email, based on token sent to that email
    # @param email_token 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def verify_remove_email(email_token, opts = {})
      data, _status_code, _headers = verify_remove_email_with_http_info(email_token, opts)
      data
    end

    # Verifies an email, based on token sent to that email
    # @param email_token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Fixnum, Hash)>] APIKeyOut data, response status code and response headers
    def verify_remove_email_with_http_info(email_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.verify_remove_email ...'
      end
      # verify the required parameter 'email_token' is set
      if @api_client.config.client_side_validation && email_token.nil?
        fail ArgumentError, "Missing the required parameter 'email_token' when calling AdminApi.verify_remove_email"
      end
      # resource path
      local_var_path = '/api2/json/verifyRemoveEmail/{emailToken}'.sub('{' + 'emailToken' + '}', email_token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIKeyOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#verify_remove_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Vetting of a source.
    # @param source 
    # @param vetted 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vet(source, vetted, opts = {})
      vet_with_http_info(source, vetted, opts)
      nil
    end

    # Vetting of a source.
    # @param source 
    # @param vetted 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def vet_with_http_info(source, vetted, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.vet ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.vet"
      end
      # verify the required parameter 'vetted' is set
      if @api_client.config.client_side_validation && vetted.nil?
        fail ArgumentError, "Missing the required parameter 'vetted' when calling AdminApi.vet"
      end
      # resource path
      local_var_path = '/api2/json/vetting/{source}/{vetted}'.sub('{' + 'source' + '}', source.to_s).sub('{' + 'vetted' + '}', vetted.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#vet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
